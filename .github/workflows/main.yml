name: main

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - main
    tags:
      - '*'
env:
  PYTHON_VERSION: '3.12.5'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: install packages
        run: |
          python -m pip install --upgrade pip
          pip install ruff safety
      - name: Run linter
        run: ruff check .
      - name: Run safety check
        run: safety check -i 70612

  test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.retrieve_version.outputs.version }}
    env:
      VIRTUAL_ENV: venv
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
      JWT_TOKEN_EXPIRE_MINUTES: ${{ secrets.JWT_TOKEN_EXPIRE_MINUTES }}
      BACKEND_CORS_ORIGINS: ${{ secrets.BACKEND_CORS_ORIGINS }}
      ACCESS_KEY_LIFESPAN_DAYS: ${{ secrets.ACCESS_KEY_LIFESPAN_DAYS }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: docker compose build
      - run: docker compose down -v --remove-orphans
      - run: docker compose up -d

      - name: Retrieve VERSION
        id: retrieve_version
        run: |
          version=$(docker compose exec backend bash ./scripts/version.sh)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Run tests
        run: docker compose exec backend bash ./scripts/test.sh
      - run: docker compose down -v --remove-orphans
      - name: Upload coverage XML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage/coverage.xml
          retention-days: 2
          overwrite: true

  sonarcloud:
    name: SonarCloud
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - env:
          VERSION: ${{ needs.test.outputs.version }}
        run: |
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          PROJECTKEY=$(sed -n 's/^sonar.projectKey=\(.*\)/\1/p' ./sonar-project.properties)
          echo "PROJECTKEY=$PROJECTKEY" >> $GITHUB_ENV

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml
          path: coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectVersion=${{ env.VERSION }}
            -Dsonar.python.coverage.reportPaths=coverage/coverage.xml

      - name: Check quality gate
        run: |
          status="PENDING"
          while [ "$status" != "OK" ] && [ "$status" != "ERROR" ]; do
            status=$(curl -s "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ env.PROJECTKEY }}" \
              | jq -r .projectStatus.status)
            echo "Quality gate status: $status"
          done
          if [ "$status" == "ERROR" ]; then
            echo "Quality gate failed"
            exit 1
          fi

  publish:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs: [test, sonarcloud]
    runs-on: ubuntu-latest
    steps:
      - env:
          VERSION: ${{ needs.test.outputs.version }}
        run: echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: aphpid/federation-api:${{ env.VERSION }}